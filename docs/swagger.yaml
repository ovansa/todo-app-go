basePath: /
definitions:
  errors.APIError:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  model.AuthUser:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  model.Todo:
    description: Todo represents a task that a user wants to track
    properties:
      completed:
        example: false
        type: boolean
      createdAt:
        example: "2022-01-01T12:00:00Z"
        type: string
      id:
        example: 5f8d0614db5c5c7b3a18f201
        type: string
      title:
        example: Buy groceries
        type: string
      updatedAt:
        example: "2022-01-01T12:00:00Z"
        type: string
      userId:
        example: 5f8d0614db5c5c7b3a18f200
        type: string
    required:
    - title
    type: object
  model.TodoCreate:
    description: TodoCreate is used when creating a new todo item
    properties:
      completed:
        example: false
        type: boolean
      title:
        example: Buy groceries
        type: string
    required:
    - title
    type: object
  model.TodoUpdate:
    description: TodoUpdate is used when updating an existing todo item
    properties:
      completed:
        example: true
        type: boolean
      description:
        example: Need to get milk and eggs
        type: string
      title:
        example: Buy more groceries
        type: string
      updatedAt:
        example: "2022-01-02T12:00:00Z"
        type: string
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      fullName:
        maxLength: 50
        minLength: 3
        type: string
      id:
        type: string
      password:
        minLength: 6
        type: string
      updatedAt:
        type: string
    required:
    - email
    - fullName
    - password
    type: object
  model.UserRegister:
    properties:
      email:
        type: string
      fullName:
        maxLength: 50
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - fullName
    - password
    type: object
info:
  contact:
    email: aminmuhammad18@gmail.com
    name: Muhammed Ibrahim
  description: This is a simple todo app backend API.
  title: Todo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs a user in and returns a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.AuthUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.APIError'
      summary: Authenticate user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: UserRegister info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.APIError'
      summary: Register a new user
      tags:
      - Auth
  /todos:
    get:
      description: Retrieve all todos for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Todo'
            type: array
      security:
      - BearerAuth: []
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new todo item for the authenticated user
      parameters:
      - description: Todo details
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/model.TodoCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Todo'
      security:
      - BearerAuth: []
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      description: Delete a todo item by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete a todo
      tags:
      - todos
    get:
      description: Get a todo item by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Todo'
      security:
      - BearerAuth: []
      summary: Get a single todo
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update a todo item by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/model.TodoUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Todo'
      security:
      - BearerAuth: []
      summary: Update a todo
      tags:
      - todos
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
